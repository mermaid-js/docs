{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js"],"names":[],"mappings":"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","file":"57.57.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\n    comments: {\n        blockComment: ['/*', '*/'],\n        lineComment: '//'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/'),\n            end: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.scss',\n    ws: '[ \\t\\n\\r\\f]*',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [{ include: '@selector' }],\n        selector: [\n            { include: '@comments' },\n            { include: '@import' },\n            { include: '@variabledeclaration' },\n            { include: '@warndebug' },\n            ['[@](include)', { token: 'keyword', next: '@includedeclaration' }],\n            [\n                '[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)',\n                { token: 'keyword', next: '@keyframedeclaration' }\n            ],\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n            ['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],\n            ['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n            { include: '@controlstatement' },\n            { include: '@selectorname' },\n            ['[&\\\\*]', 'tag'],\n            ['[>\\\\+,]', 'delimiter'],\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }]\n        ],\n        selectorbody: [\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\n            { include: '@selector' },\n            ['[@](extend)', { token: 'keyword', next: '@extendbody' }],\n            ['[@](return)', { token: 'keyword', next: '@declarationbody' }],\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\n        ],\n        selectorname: [\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'] // selector (.foo, div, ...)\n        ],\n        selectorattribute: [\n            { include: '@term' },\n            [']', { token: 'delimiter.bracket', next: '@pop' }]\n        ],\n        term: [\n            { include: '@comments' },\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n            { include: '@functioninvocation' },\n            { include: '@numbers' },\n            { include: '@strings' },\n            { include: '@variablereference' },\n            ['(and\\\\b|or\\\\b|not\\\\b)', 'operator'],\n            { include: '@name' },\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'],\n            [',', 'delimiter'],\n            ['!default', 'literal'],\n            ['\\\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }]\n        ],\n        rulevalue: [\n            { include: '@term' },\n            ['!important', 'literal'],\n            [';', 'delimiter', '@pop'],\n            ['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        nestedproperty: [\n            ['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],\n            { include: '@comments' },\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\n        ],\n        warndebug: [['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]],\n        import: [['[@](import)', { token: 'keyword', next: '@declarationbody' }]],\n        variabledeclaration: [\n            // sass variables\n            ['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody']\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'meta', next: '@pop' }]\n        ],\n        parenthizedterm: [\n            { include: '@term' },\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        declarationbody: [\n            { include: '@term' },\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        extendbody: [\n            { include: '@selectorname' },\n            ['!optional', 'literal'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        variablereference: [\n            // sass variable reference\n            ['\\\\$@identifier', 'variable.ref'],\n            ['\\\\.\\\\.\\\\.', 'operator'],\n            ['#{', { token: 'meta', next: '@variableinterpolation' }] // sass var resolve\n        ],\n        variableinterpolation: [\n            { include: '@variablereference' },\n            ['}', { token: 'meta', next: '@pop' }]\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment']\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            ['.', 'comment']\n        ],\n        name: [['@identifier', 'attribute.value']],\n        numbers: [\n            ['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex']\n        ],\n        units: [\n            [\n                '(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\n                'number',\n                '@pop'\n            ]\n        ],\n        functiondeclaration: [\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n            ['{', { token: 'delimiter.curly', switchTo: '@functionbody' }]\n        ],\n        mixindeclaration: [\n            // mixin with parameters\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n            // mixin without parameters\n            ['@identifier', 'meta'],\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\n        ],\n        parameterdeclaration: [\n            ['\\\\$@identifier@ws:', 'variable.decl'],\n            ['\\\\.\\\\.\\\\.', 'operator'],\n            [',', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'meta', next: '@pop' }]\n        ],\n        includedeclaration: [\n            { include: '@functioninvocation' },\n            ['@identifier', 'meta'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }],\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\n        ],\n        keyframedeclaration: [\n            ['@identifier', 'meta'],\n            ['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }]\n        ],\n        keyframebody: [\n            { include: '@term' },\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\n        ],\n        controlstatement: [\n            [\n                '[@](if|else|for|while|each|media)',\n                { token: 'keyword.flow', next: '@controlstatementdeclaration' }\n            ]\n        ],\n        controlstatementdeclaration: [\n            ['(in|from|through|if|to)\\\\b', { token: 'keyword.flow' }],\n            { include: '@term' },\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\n        ],\n        functionbody: [\n            ['[@](return)', { token: 'keyword' }],\n            { include: '@variabledeclaration' },\n            { include: '@term' },\n            { include: '@controlstatement' },\n            [';', 'delimiter'],\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\n        ],\n        functioninvocation: [['@identifier\\\\(', { token: 'meta', next: '@functionarguments' }]],\n        functionarguments: [\n            ['\\\\$@identifier@ws:', 'attribute.name'],\n            ['[,]', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'meta', next: '@pop' }]\n        ],\n        strings: [\n            ['~?\"', { token: 'string.delimiter', next: '@stringenddoublequote' }],\n            [\"~?'\", { token: 'string.delimiter', next: '@stringendquote' }]\n        ],\n        stringenddoublequote: [\n            ['\\\\\\\\.', 'string'],\n            ['\"', { token: 'string.delimiter', next: '@pop' }],\n            ['.', 'string']\n        ],\n        stringendquote: [\n            ['\\\\\\\\.', 'string'],\n            [\"'\", { token: 'string.delimiter', next: '@pop' }],\n            ['.', 'string']\n        ]\n    }\n};\n"],"sourceRoot":""}